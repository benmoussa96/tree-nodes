{"ast":null,"code":"import _asyncToGenerator from \"/Users/ghaieth/2.Work/FrozenLogic/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { concat } from 'rxjs';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { FlatNodeModel } from '../_models/node/flatNode.model';\nimport { NodeService } from '../_services/node/node.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/node/node.service\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/tooltip\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/tree\";\nimport * as i8 from \"@angular/material/checkbox\";\n\nfunction NodesComponent_mat_tree_node_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 8);\n    i0.ɵɵelement(1, \"button\", 9);\n    i0.ɵɵelementStart(2, \"mat-checkbox\", 10);\n    i0.ɵɵlistener(\"change\", function NodesComponent_mat_tree_node_12_Template_mat_checkbox_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const node_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.todoLeafItemSelectionToggle(node_r4);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_12_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const node_r4 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.addNewItem(node_r4, \"\");\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_12_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const node_r4 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.saveNode(node_r4, \"\");\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\");\n    i0.ɵɵtext(9, \"edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r1.checklistSelection.isSelected(node_r4));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r4.name);\n  }\n}\n\nfunction NodesComponent_mat_tree_node_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 13);\n    i0.ɵɵelement(1, \"button\", 9);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4, \"New node...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 1, 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_13_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const node_r9 = restoredCtx.$implicit;\n\n      const _r10 = i0.ɵɵreference(6);\n\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.saveNode(node_r9, _r10.value);\n    });\n    i0.ɵɵtext(8, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NodesComponent_mat_tree_node_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 13);\n    i0.ɵɵelementStart(1, \"button\", 17);\n    i0.ɵɵelementStart(2, \"mat-icon\", 18);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 19);\n    i0.ɵɵlistener(\"change\", function NodesComponent_mat_tree_node_14_Template_mat_checkbox_change_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const node_r13 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.todoItemSelectionToggle(node_r13);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_14_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const node_r13 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.addNewItem(node_r13, \"\");\n    });\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_14_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const node_r13 = restoredCtx.$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.saveNode(node_r13, \"\");\n    });\n    i0.ɵɵelementStart(10, \"mat-icon\");\n    i0.ɵɵtext(11, \"edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r13 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r13.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.treeControl.isExpanded(node_r13) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r3.descendantsAllSelected(node_r13))(\"indeterminate\", ctx_r3.descendantsPartiallySelected(node_r13));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r13.name);\n  }\n}\n\nexport class NodesComponent {\n  constructor(service) {\n    this.service = service;\n    /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n    this.flatNodeMap = new Map();\n    /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n\n    this.nestedNodeMap = new Map();\n    /** A selected parent node to be inserted */\n\n    this.selectedParent = null;\n    /** The new item's name */\n\n    this.newItemName = '';\n    /** The selection for checklist */\n\n    this.checklistSelection = new SelectionModel(true\n    /* multiple */\n    );\n\n    this.getLevel = node => node.level;\n\n    this.isExpandable = node => node.expandable;\n\n    this.getChildren = node => node.children;\n\n    this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n    this.hasNoContent = (_, _nodeData) => _nodeData.name === '';\n    /**\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n     */\n\n\n    this.transformer = (node, level) => {\n      var _a;\n\n      const existingNode = this.nestedNodeMap.get(node);\n      const flatNode = existingNode && existingNode.name === node.name ? existingNode : new FlatNodeModel();\n      flatNode.name = node.name;\n      flatNode.level = level;\n      flatNode.expandable = !!((_a = node.children) === null || _a === void 0 ? void 0 : _a.length);\n      this.flatNodeMap.set(flatNode, node);\n      this.nestedNodeMap.set(node, flatNode);\n      return flatNode;\n    };\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.initialize();\n  }\n\n  initialize() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.service.getAllNodes().subscribe(data => {\n        _this.updateDataSource(data);\n      });\n    })();\n  } // Method that updates the data source\n\n\n  updateDataSource(dataObjects) {\n    // save node's expanded state\n    const expandedNodesIds = [];\n\n    if (this.treeControl.dataNodes) {\n      this.treeControl.dataNodes.forEach(node => {\n        if (this.treeControl.isExpandable(node) && this.treeControl.isExpanded(node)) {\n          const nestedNode = this.flatNodeMap.get(node);\n          expandedNodesIds.push(nestedNode.id);\n        }\n      });\n    } // update data source\n\n\n    this.dataSource.data = dataObjects; // restore node's expanded state\n\n    this.treeControl.dataNodes.filter(node => {\n      const nestedNode = this.flatNodeMap.get(node);\n      return this.checklistSelection.isSelected(node) || expandedNodesIds.find(id => {\n        return id === nestedNode.id;\n      });\n    }).forEach(nodeToExpand => {\n      this.treeControl.expand(nodeToExpand);\n    });\n  }\n  /** Whether all the descendants of the node are selected. */\n\n\n  descendantsAllSelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n    return descAllSelected;\n  }\n  /** Whether part of the descendants are selected */\n\n\n  descendantsPartiallySelected(node) {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n\n\n  todoItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node) ? this.checklistSelection.select(...descendants) : this.checklistSelection.deselect(...descendants); // Force update for the parent\n\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n\n\n  todoLeafItemSelectionToggle(node) {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n  /* Checks all the parents when a leaf node is selected/unselected */\n\n\n  checkAllParentsSelection(node) {\n    let parent = this.getParentNode(node);\n\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n  /** Check root node checked state and change it accordingly */\n\n\n  checkRootNodeSelection(node) {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\n      return this.checklistSelection.isSelected(child);\n    });\n\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n  /* Get the parent node of a node */\n\n\n  getParentNode(node) {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n\n    return null;\n  }\n  /** Select the category so we can insert the new item. */\n\n\n  addNewItem(node, nodeName) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const parentNode = node != null ? _this2.flatNodeMap.get(node) : null;\n      yield _this2.service.createNode(parentNode, nodeName).subscribe({\n        next: data => _this2.initialize(),\n        error: error => _this2.handleError(error)\n      });\n      if (node != null) _this2.treeControl.expand(node);\n    })();\n  }\n  /** Save the node to database */\n\n\n  saveNode(node, itemValue) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const nestedNode = _this3.flatNodeMap.get(node);\n\n      yield _this3.service.modifyNode(nestedNode, itemValue).subscribe({\n        next: data => _this3.initialize(),\n        error: error => _this3.handleError(error)\n      });\n    })();\n  }\n  /** Delete all selected node sorted by level. */\n\n\n  deleteSelectedNodes() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const nodes = _this4.checklistSelection.selected.sort((a, b) => a.level > b.level ? -1 : b.level > a.level ? 1 : 0);\n\n      const observables = nodes.map(node => {\n        const nestedNode = _this4.flatNodeMap.get(node);\n\n        return _this4.service.deleteNode(nestedNode.id);\n      });\n      console.log(observables);\n      concat(...observables).subscribe({\n        next: data => {\n          console.log('data:', data);\n        },\n        error: error => _this4.handleError(error)\n      }).pipe(_this4.initialize());\n      ; // for (const node of nodes) {\n      //   const nestedNode = this.flatNodeMap.get(node);\n      //   await this.service.deleteNode(nestedNode!.id)\n      //     .subscribe({\n      //         error: error => this.handleError(error)\n      //     });\n      // }\n    })();\n  }\n\n  handleError(error) {\n    // this.errorMessage = error.message;\n    console.error('There was an error!', error);\n  }\n\n}\n\nNodesComponent.ɵfac = function NodesComponent_Factory(t) {\n  return new (t || NodesComponent)(i0.ɵɵdirectiveInject(i1.NodeService));\n};\n\nNodesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NodesComponent,\n  selectors: [[\"app-nodes\"]],\n  features: [i0.ɵɵProvidersFeature([NodeService])],\n  decls: 15,\n  vars: 4,\n  consts: [[\"appearance\", \"fill\", 1, \"rootAddName\"], [\"matInput\", \"\"], [\"rootItemValue\", \"\"], [\"mat-fab\", \"\", \"color\", \"primary\", \"matTooltip\", \"Add root node\", 1, \"rootAdd\", 3, \"click\"], [\"mat-fab\", \"\", \"color\", \"warn\", \"matTooltip\", \"Delete selected Nodes\", 3, \"click\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Add child node\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Edit node\", 3, \"click\"], [\"matTreeNodePadding\", \"\"], [\"appearance\", \"fill\"], [\"itemValue\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"]],\n  template: function NodesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r18 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n      i0.ɵɵelementStart(1, \"mat-label\");\n      i0.ɵɵtext(2, \"New root node...\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 1, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function NodesComponent_Template_button_click_5_listener() {\n        i0.ɵɵrestoreView(_r18);\n\n        const _r0 = i0.ɵɵreference(4);\n\n        return ctx.addNewItem(null, _r0.value);\n      });\n      i0.ɵɵelementStart(6, \"mat-icon\");\n      i0.ɵɵtext(7, \"add\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function NodesComponent_Template_button_click_8_listener() {\n        return ctx.deleteSelectedNodes();\n      });\n      i0.ɵɵelementStart(9, \"mat-icon\");\n      i0.ɵɵtext(10, \"delete\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"mat-tree\", 5);\n      i0.ɵɵtemplate(12, NodesComponent_mat_tree_node_12_Template, 10, 2, \"mat-tree-node\", 6);\n      i0.ɵɵtemplate(13, NodesComponent_mat_tree_node_13_Template, 9, 0, \"mat-tree-node\", 7);\n      i0.ɵɵtemplate(14, NodesComponent_mat_tree_node_14_Template, 12, 5, \"mat-tree-node\", 7);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n    }\n  },\n  directives: [i2.MatFormField, i2.MatLabel, i3.MatInput, i4.MatButton, i5.MatTooltip, i6.MatIcon, i7.MatTree, i7.MatTreeNodeDef, i7.MatTreeNode, i7.MatTreeNodeToggle, i7.MatTreeNodePadding, i8.MatCheckbox],\n  styles: [\".rootAddName[_ngcontent-%COMP%] {\\n  margin: 25px;\\n}\\n\\n.rootAdd[_ngcontent-%COMP%] {\\n  margin-right: 25px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksWUFBQTtBQUNKOztBQUVBO0VBQ0ksa0JBQUE7QUFDSiIsImZpbGUiOiJub2Rlcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5yb290QWRkTmFtZSB7XG4gICAgbWFyZ2luOiAyNXB4O1xufVxuXG4ucm9vdEFkZCB7XG4gICAgbWFyZ2luLXJpZ2h0OiAyNXB4O1xufSJdfQ== */\"]\n});","map":{"version":3,"sources":["/Users/ghaieth/2.Work/FrozenLogic/client/src/app/nodes/nodes.component.ts"],"names":["concat","SelectionModel","FlatTreeControl","MatTreeFlatDataSource","MatTreeFlattener","FlatNodeModel","NodeService","i0","i1","i2","i3","i4","i5","i6","i7","i8","NodesComponent_mat_tree_node_12_Template","rf","ctx","_r6","ɵɵgetCurrentView","ɵɵelementStart","ɵɵelement","ɵɵlistener","NodesComponent_mat_tree_node_12_Template_mat_checkbox_change_2_listener","restoredCtx","ɵɵrestoreView","node_r4","$implicit","ctx_r5","ɵɵnextContext","todoLeafItemSelectionToggle","ɵɵtext","ɵɵelementEnd","NodesComponent_mat_tree_node_12_Template_button_click_4_listener","ctx_r7","addNewItem","NodesComponent_mat_tree_node_12_Template_button_click_7_listener","ctx_r8","saveNode","ctx_r1","ɵɵadvance","ɵɵproperty","checklistSelection","isSelected","ɵɵtextInterpolate","name","NodesComponent_mat_tree_node_13_Template","_r12","NodesComponent_mat_tree_node_13_Template_button_click_7_listener","node_r9","_r10","ɵɵreference","ctx_r11","value","NodesComponent_mat_tree_node_14_Template","_r15","NodesComponent_mat_tree_node_14_Template_mat_checkbox_change_4_listener","node_r13","ctx_r14","todoItemSelectionToggle","NodesComponent_mat_tree_node_14_Template_button_click_6_listener","ctx_r16","NodesComponent_mat_tree_node_14_Template_button_click_9_listener","ctx_r17","ctx_r3","ɵɵattribute","ɵɵtextInterpolate1","treeControl","isExpanded","descendantsAllSelected","descendantsPartiallySelected","NodesComponent","constructor","service","flatNodeMap","Map","nestedNodeMap","selectedParent","newItemName","getLevel","node","level","isExpandable","expandable","getChildren","children","hasChild","_","_nodeData","hasNoContent","transformer","_a","existingNode","get","flatNode","length","set","treeFlattener","dataSource","initialize","getAllNodes","subscribe","data","updateDataSource","dataObjects","expandedNodesIds","dataNodes","forEach","nestedNode","push","id","filter","find","nodeToExpand","expand","descendants","getDescendants","descAllSelected","every","child","result","some","toggle","select","deselect","checkAllParentsSelection","parent","getParentNode","checkRootNodeSelection","nodeSelected","currentLevel","startIndex","indexOf","i","currentNode","nodeName","parentNode","createNode","next","error","handleError","itemValue","modifyNode","deleteSelectedNodes","nodes","selected","sort","a","b","observables","map","deleteNode","console","log","pipe","ɵfac","NodesComponent_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","NodesComponent_Template","_r18","NodesComponent_Template_button_click_5_listener","_r0","NodesComponent_Template_button_click_8_listener","ɵɵtemplate","directives","MatFormField","MatLabel","MatInput","MatButton","MatTooltip","MatIcon","MatTree","MatTreeNodeDef","MatTreeNode","MatTreeNodeToggle","MatTreeNodePadding","MatCheckbox","styles"],"mappings":"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","sourcesContent":["import { concat } from 'rxjs';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { FlatNodeModel } from '../_models/node/flatNode.model';\nimport { NodeService } from '../_services/node/node.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/node/node.service\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/tooltip\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/tree\";\nimport * as i8 from \"@angular/material/checkbox\";\nfunction NodesComponent_mat_tree_node_12_Template(rf, ctx) { if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 8);\n    i0.ɵɵelement(1, \"button\", 9);\n    i0.ɵɵelementStart(2, \"mat-checkbox\", 10);\n    i0.ɵɵlistener(\"change\", function NodesComponent_mat_tree_node_12_Template_mat_checkbox_change_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const node_r4 = restoredCtx.$implicit; const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.todoLeafItemSelectionToggle(node_r4); });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_12_Template_button_click_4_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const node_r4 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.addNewItem(node_r4, \"\"); });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_12_Template_button_click_7_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const node_r4 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.saveNode(node_r4, \"\"); });\n    i0.ɵɵelementStart(8, \"mat-icon\");\n    i0.ɵɵtext(9, \"edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r1.checklistSelection.isSelected(node_r4));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r4.name);\n} }\nfunction NodesComponent_mat_tree_node_13_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 13);\n    i0.ɵɵelement(1, \"button\", 9);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4, \"New node...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 1, 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_13_Template_button_click_7_listener() { const restoredCtx = i0.ɵɵrestoreView(_r12); const node_r9 = restoredCtx.$implicit; const _r10 = i0.ɵɵreference(6); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.saveNode(node_r9, _r10.value); });\n    i0.ɵɵtext(8, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} }\nfunction NodesComponent_mat_tree_node_14_Template(rf, ctx) { if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 13);\n    i0.ɵɵelementStart(1, \"button\", 17);\n    i0.ɵɵelementStart(2, \"mat-icon\", 18);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-checkbox\", 19);\n    i0.ɵɵlistener(\"change\", function NodesComponent_mat_tree_node_14_Template_mat_checkbox_change_4_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const node_r13 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.todoItemSelectionToggle(node_r13); });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_14_Template_button_click_6_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const node_r13 = restoredCtx.$implicit; const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.addNewItem(node_r13, \"\"); });\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function NodesComponent_mat_tree_node_14_Template_button_click_9_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const node_r13 = restoredCtx.$implicit; const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.saveNode(node_r13, \"\"); });\n    i0.ɵɵelementStart(10, \"mat-icon\");\n    i0.ɵɵtext(11, \"edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r13 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r13.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.treeControl.isExpanded(node_r13) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r3.descendantsAllSelected(node_r13))(\"indeterminate\", ctx_r3.descendantsPartiallySelected(node_r13));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r13.name);\n} }\nexport class NodesComponent {\n    constructor(service) {\n        this.service = service;\n        /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n        this.flatNodeMap = new Map();\n        /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n        this.nestedNodeMap = new Map();\n        /** A selected parent node to be inserted */\n        this.selectedParent = null;\n        /** The new item's name */\n        this.newItemName = '';\n        /** The selection for checklist */\n        this.checklistSelection = new SelectionModel(true /* multiple */);\n        this.getLevel = (node) => node.level;\n        this.isExpandable = (node) => node.expandable;\n        this.getChildren = (node) => node.children;\n        this.hasChild = (_, _nodeData) => _nodeData.expandable;\n        this.hasNoContent = (_, _nodeData) => _nodeData.name === '';\n        /**\n         * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n         */\n        this.transformer = (node, level) => {\n            var _a;\n            const existingNode = this.nestedNodeMap.get(node);\n            const flatNode = existingNode && existingNode.name === node.name ? existingNode : new FlatNodeModel();\n            flatNode.name = node.name;\n            flatNode.level = level;\n            flatNode.expandable = !!((_a = node.children) === null || _a === void 0 ? void 0 : _a.length);\n            this.flatNodeMap.set(flatNode, node);\n            this.nestedNodeMap.set(node, flatNode);\n            return flatNode;\n        };\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.initialize();\n    }\n    async initialize() {\n        await this.service.getAllNodes().subscribe(data => {\n            this.updateDataSource(data);\n        });\n    }\n    // Method that updates the data source\n    updateDataSource(dataObjects) {\n        // save node's expanded state\n        const expandedNodesIds = [];\n        if (this.treeControl.dataNodes) {\n            this.treeControl.dataNodes.forEach((node) => {\n                if (this.treeControl.isExpandable(node) && this.treeControl.isExpanded(node)) {\n                    const nestedNode = this.flatNodeMap.get(node);\n                    expandedNodesIds.push(nestedNode.id);\n                }\n            });\n        }\n        // update data source\n        this.dataSource.data = dataObjects;\n        // restore node's expanded state\n        this.treeControl.dataNodes\n            .filter(node => {\n            const nestedNode = this.flatNodeMap.get(node);\n            return this.checklistSelection.isSelected(node) || expandedNodesIds.find(id => {\n                return id === nestedNode.id;\n            });\n        })\n            .forEach(nodeToExpand => {\n            this.treeControl.expand(nodeToExpand);\n        });\n    }\n    /** Whether all the descendants of the node are selected. */\n    descendantsAllSelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.length > 0 &&\n            descendants.every(child => {\n                return this.checklistSelection.isSelected(child);\n            });\n        return descAllSelected;\n    }\n    /** Whether part of the descendants are selected */\n    descendantsPartiallySelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some(child => this.checklistSelection.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\n    todoItemSelectionToggle(node) {\n        this.checklistSelection.toggle(node);\n        const descendants = this.treeControl.getDescendants(node);\n        this.checklistSelection.isSelected(node)\n            ? this.checklistSelection.select(...descendants)\n            : this.checklistSelection.deselect(...descendants);\n        // Force update for the parent\n        descendants.forEach(child => this.checklistSelection.isSelected(child));\n        this.checkAllParentsSelection(node);\n    }\n    /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n    todoLeafItemSelectionToggle(node) {\n        this.checklistSelection.toggle(node);\n        this.checkAllParentsSelection(node);\n    }\n    /* Checks all the parents when a leaf node is selected/unselected */\n    checkAllParentsSelection(node) {\n        let parent = this.getParentNode(node);\n        while (parent) {\n            this.checkRootNodeSelection(parent);\n            parent = this.getParentNode(parent);\n        }\n    }\n    /** Check root node checked state and change it accordingly */\n    checkRootNodeSelection(node) {\n        const nodeSelected = this.checklistSelection.isSelected(node);\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.length > 0 &&\n            descendants.every(child => {\n                return this.checklistSelection.isSelected(child);\n            });\n        if (nodeSelected && !descAllSelected) {\n            this.checklistSelection.deselect(node);\n        }\n        else if (!nodeSelected && descAllSelected) {\n            this.checklistSelection.select(node);\n        }\n    }\n    /* Get the parent node of a node */\n    getParentNode(node) {\n        const currentLevel = this.getLevel(node);\n        if (currentLevel < 1) {\n            return null;\n        }\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n        for (let i = startIndex; i >= 0; i--) {\n            const currentNode = this.treeControl.dataNodes[i];\n            if (this.getLevel(currentNode) < currentLevel) {\n                return currentNode;\n            }\n        }\n        return null;\n    }\n    /** Select the category so we can insert the new item. */\n    async addNewItem(node, nodeName) {\n        const parentNode = (node != null ? this.flatNodeMap.get(node) : null);\n        await this.service.createNode(parentNode, nodeName)\n            .subscribe({\n            next: data => this.initialize(),\n            error: error => this.handleError(error)\n        });\n        if (node != null)\n            this.treeControl.expand(node);\n    }\n    /** Save the node to database */\n    async saveNode(node, itemValue) {\n        const nestedNode = this.flatNodeMap.get(node);\n        await this.service.modifyNode(nestedNode, itemValue)\n            .subscribe({\n            next: data => this.initialize(),\n            error: error => this.handleError(error)\n        });\n    }\n    /** Delete all selected node sorted by level. */\n    async deleteSelectedNodes() {\n        const nodes = this.checklistSelection.selected.sort((a, b) => (a.level > b.level) ? -1 : ((b.level > a.level) ? 1 : 0));\n        const observables = nodes.map(node => {\n            const nestedNode = this.flatNodeMap.get(node);\n            return this.service.deleteNode(nestedNode.id);\n        });\n        console.log(observables);\n        concat(...observables)\n            .subscribe({\n            next: data => {\n                console.log('data:', data);\n            },\n            error: error => this.handleError(error)\n        })\n            .pipe(this.initialize());\n        ;\n        // for (const node of nodes) {\n        //   const nestedNode = this.flatNodeMap.get(node);\n        //   await this.service.deleteNode(nestedNode!.id)\n        //     .subscribe({\n        //         error: error => this.handleError(error)\n        //     });\n        // }\n    }\n    handleError(error) {\n        // this.errorMessage = error.message;\n        console.error('There was an error!', error);\n    }\n}\nNodesComponent.ɵfac = function NodesComponent_Factory(t) { return new (t || NodesComponent)(i0.ɵɵdirectiveInject(i1.NodeService)); };\nNodesComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NodesComponent, selectors: [[\"app-nodes\"]], features: [i0.ɵɵProvidersFeature([NodeService])], decls: 15, vars: 4, consts: [[\"appearance\", \"fill\", 1, \"rootAddName\"], [\"matInput\", \"\"], [\"rootItemValue\", \"\"], [\"mat-fab\", \"\", \"color\", \"primary\", \"matTooltip\", \"Add root node\", 1, \"rootAdd\", 3, \"click\"], [\"mat-fab\", \"\", \"color\", \"warn\", \"matTooltip\", \"Delete selected Nodes\", 3, \"click\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Add child node\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Edit node\", 3, \"click\"], [\"matTreeNodePadding\", \"\"], [\"appearance\", \"fill\"], [\"itemValue\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"]], template: function NodesComponent_Template(rf, ctx) { if (rf & 1) {\n        const _r18 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        i0.ɵɵelementStart(1, \"mat-label\");\n        i0.ɵɵtext(2, \"New root node...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"input\", 1, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function NodesComponent_Template_button_click_5_listener() { i0.ɵɵrestoreView(_r18); const _r0 = i0.ɵɵreference(4); return ctx.addNewItem(null, _r0.value); });\n        i0.ɵɵelementStart(6, \"mat-icon\");\n        i0.ɵɵtext(7, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function NodesComponent_Template_button_click_8_listener() { return ctx.deleteSelectedNodes(); });\n        i0.ɵɵelementStart(9, \"mat-icon\");\n        i0.ɵɵtext(10, \"delete\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-tree\", 5);\n        i0.ɵɵtemplate(12, NodesComponent_mat_tree_node_12_Template, 10, 2, \"mat-tree-node\", 6);\n        i0.ɵɵtemplate(13, NodesComponent_mat_tree_node_13_Template, 9, 0, \"mat-tree-node\", 7);\n        i0.ɵɵtemplate(14, NodesComponent_mat_tree_node_14_Template, 12, 5, \"mat-tree-node\", 7);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i2.MatFormField, i2.MatLabel, i3.MatInput, i4.MatButton, i5.MatTooltip, i6.MatIcon, i7.MatTree, i7.MatTreeNodeDef, i7.MatTreeNode, i7.MatTreeNodeToggle, i7.MatTreeNodePadding, i8.MatCheckbox], styles: [\".rootAddName[_ngcontent-%COMP%] {\\n  margin: 25px;\\n}\\n\\n.rootAdd[_ngcontent-%COMP%] {\\n  margin-right: 25px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksWUFBQTtBQUNKOztBQUVBO0VBQ0ksa0JBQUE7QUFDSiIsImZpbGUiOiJub2Rlcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5yb290QWRkTmFtZSB7XG4gICAgbWFyZ2luOiAyNXB4O1xufVxuXG4ucm9vdEFkZCB7XG4gICAgbWFyZ2luLXJpZ2h0OiAyNXB4O1xufSJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}